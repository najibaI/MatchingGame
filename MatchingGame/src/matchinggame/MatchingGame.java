/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * File Name:	MatchingGame
 * Programmer:	Najiba Imam
 * Date:	July 13, 2021
 * Description:	This program is a modified version of the Matching Game. 
 *              The Matching Game is like the old memory game where the user
 *              selects two cards and sees if they match. Otherwise, they would 
 *              have to guess again on their next turn.
 
 */

package matchinggame;

import java.util.*;  // required in order to use Array Lists
import javax.swing.ImageIcon;
import javax.swing.JButton;

/**
 *
 * @author najib
 */
public class MatchingGame extends javax.swing.JFrame {

    ArrayList<String> cards = new ArrayList<String>();
    ArrayList<String> set = new ArrayList<String>();
    ImageIcon a = new ImageIcon ("bubblegum.jpg");
    ImageIcon b = new ImageIcon ("gummybears.jpg");
    ImageIcon c = new ImageIcon ("hersheyskisses.jpg");
    ImageIcon d = new ImageIcon ("lindor.jpg");
    ImageIcon e = new ImageIcon ("lollipop.jpg");
    ImageIcon f = new ImageIcon ("ringpop.jpg");
    ImageIcon g = new ImageIcon ("smarties.jpg");
    ImageIcon h = new ImageIcon ("snickers.jpg");
    ImageIcon i = new ImageIcon ("starburst.jpg");
    ImageIcon j = new ImageIcon ("twix.jpg");
    ImageIcon back = new ImageIcon ("cardback.jpg");
    ImageIcon done = new ImageIcon ("done.jpg");
    
    int count, c1, c2, card1, card2;
    int cardsLeft = 20;
    int[] change = new int[20];
    
    /**
     * Creates new form MatchingGame
     */
    public MatchingGame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainTitle = new javax.swing.JLabel();
        Card1 = new javax.swing.JButton();
        Card2 = new javax.swing.JButton();
        Card3 = new javax.swing.JButton();
        Card4 = new javax.swing.JButton();
        Card5 = new javax.swing.JButton();
        Card6 = new javax.swing.JButton();
        Card7 = new javax.swing.JButton();
        Card8 = new javax.swing.JButton();
        Card9 = new javax.swing.JButton();
        Card10 = new javax.swing.JButton();
        Card11 = new javax.swing.JButton();
        Card12 = new javax.swing.JButton();
        Card13 = new javax.swing.JButton();
        Card14 = new javax.swing.JButton();
        Card15 = new javax.swing.JButton();
        Card16 = new javax.swing.JButton();
        Card17 = new javax.swing.JButton();
        Card18 = new javax.swing.JButton();
        Card19 = new javax.swing.JButton();
        Card20 = new javax.swing.JButton();
        btnPlay = new javax.swing.JButton();
        btnGuessAgain = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        txtInstruction = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainTitle.setFont(new java.awt.Font("Book Antiqua", 1, 20)); // NOI18N
        mainTitle.setForeground(new java.awt.Color(255, 140, 0));
        mainTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mainTitle.setText("Matching  Game");
        mainTitle.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 3, 2, 3, new java.awt.Color(255, 215, 0)));

        Card1.setIcon(new javax.swing.ImageIcon("C:\\Users\\najib\\OneDrive\\Documents\\NetBeansProjects\\MatchingGame\\cardback.jpg")); // NOI18N
        Card1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card1ActionPerformed(evt);
            }
        });

        Card2.setIcon(new javax.swing.ImageIcon("C:\\Users\\najib\\OneDrive\\Documents\\NetBeansProjects\\MatchingGame\\cardback.jpg")); // NOI18N
        Card2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card2ActionPerformed(evt);
            }
        });

        Card3.setIcon(new javax.swing.ImageIcon("C:\\Users\\najib\\OneDrive\\Documents\\NetBeansProjects\\MatchingGame\\cardback.jpg")); // NOI18N
        Card3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card3ActionPerformed(evt);
            }
        });

        Card4.setIcon(new javax.swing.ImageIcon("C:\\Users\\najib\\OneDrive\\Documents\\NetBeansProjects\\MatchingGame\\cardback.jpg")); // NOI18N
        Card4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card4ActionPerformed(evt);
            }
        });

        Card5.setIcon(new javax.swing.ImageIcon("C:\\Users\\najib\\OneDrive\\Documents\\NetBeansProjects\\MatchingGame\\cardback.jpg")); // NOI18N
        Card5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card5ActionPerformed(evt);
            }
        });

        Card6.setIcon(new javax.swing.ImageIcon("C:\\Users\\najib\\OneDrive\\Documents\\NetBeansProjects\\MatchingGame\\cardback.jpg")); // NOI18N
        Card6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card6ActionPerformed(evt);
            }
        });

        Card7.setIcon(new javax.swing.ImageIcon("C:\\Users\\najib\\OneDrive\\Documents\\NetBeansProjects\\MatchingGame\\cardback.jpg")); // NOI18N
        Card7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card7ActionPerformed(evt);
            }
        });

        Card8.setIcon(new javax.swing.ImageIcon("C:\\Users\\najib\\OneDrive\\Documents\\NetBeansProjects\\MatchingGame\\cardback.jpg")); // NOI18N
        Card8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card8ActionPerformed(evt);
            }
        });

        Card9.setIcon(new javax.swing.ImageIcon("C:\\Users\\najib\\OneDrive\\Documents\\NetBeansProjects\\MatchingGame\\cardback.jpg")); // NOI18N
        Card9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card9ActionPerformed(evt);
            }
        });

        Card10.setIcon(new javax.swing.ImageIcon("C:\\Users\\najib\\OneDrive\\Documents\\NetBeansProjects\\MatchingGame\\cardback.jpg")); // NOI18N
        Card10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card10ActionPerformed(evt);
            }
        });

        Card11.setIcon(new javax.swing.ImageIcon("C:\\Users\\najib\\OneDrive\\Documents\\NetBeansProjects\\MatchingGame\\cardback.jpg")); // NOI18N
        Card11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card11ActionPerformed(evt);
            }
        });

        Card12.setIcon(new javax.swing.ImageIcon("C:\\Users\\najib\\OneDrive\\Documents\\NetBeansProjects\\MatchingGame\\cardback.jpg")); // NOI18N
        Card12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card12ActionPerformed(evt);
            }
        });

        Card13.setIcon(new javax.swing.ImageIcon("C:\\Users\\najib\\OneDrive\\Documents\\NetBeansProjects\\MatchingGame\\cardback.jpg")); // NOI18N
        Card13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card13ActionPerformed(evt);
            }
        });

        Card14.setIcon(new javax.swing.ImageIcon("C:\\Users\\najib\\OneDrive\\Documents\\NetBeansProjects\\MatchingGame\\cardback.jpg")); // NOI18N
        Card14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card14ActionPerformed(evt);
            }
        });

        Card15.setIcon(new javax.swing.ImageIcon("C:\\Users\\najib\\OneDrive\\Documents\\NetBeansProjects\\MatchingGame\\cardback.jpg")); // NOI18N
        Card15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card15ActionPerformed(evt);
            }
        });

        Card16.setIcon(new javax.swing.ImageIcon("C:\\Users\\najib\\OneDrive\\Documents\\NetBeansProjects\\MatchingGame\\cardback.jpg")); // NOI18N
        Card16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card16ActionPerformed(evt);
            }
        });

        Card17.setIcon(new javax.swing.ImageIcon("C:\\Users\\najib\\OneDrive\\Documents\\NetBeansProjects\\MatchingGame\\cardback.jpg")); // NOI18N
        Card17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card17ActionPerformed(evt);
            }
        });

        Card18.setIcon(new javax.swing.ImageIcon("C:\\Users\\najib\\OneDrive\\Documents\\NetBeansProjects\\MatchingGame\\cardback.jpg")); // NOI18N
        Card18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card18ActionPerformed(evt);
            }
        });

        Card19.setIcon(new javax.swing.ImageIcon("C:\\Users\\najib\\OneDrive\\Documents\\NetBeansProjects\\MatchingGame\\cardback.jpg")); // NOI18N
        Card19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card19ActionPerformed(evt);
            }
        });

        Card20.setIcon(new javax.swing.ImageIcon("C:\\Users\\najib\\OneDrive\\Documents\\NetBeansProjects\\MatchingGame\\cardback.jpg")); // NOI18N
        Card20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card20ActionPerformed(evt);
            }
        });

        btnPlay.setFont(new java.awt.Font("Ebrima", 0, 12)); // NOI18N
        btnPlay.setText("Play");
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });

        btnGuessAgain.setFont(new java.awt.Font("Ebrima", 0, 12)); // NOI18N
        btnGuessAgain.setText("Guess Again");
        btnGuessAgain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuessAgainActionPerformed(evt);
            }
        });

        btnExit.setFont(new java.awt.Font("Ebrima", 0, 12)); // NOI18N
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        txtInstruction.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        txtInstruction.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtInstruction.setText("Click the Play button to start. Make sure to click Guess Again after each guess.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(Card11, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Card6, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Card1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Card16, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(btnPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(txtInstruction, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(Card12, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Card17, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Card18, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Card13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(Card2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(Card7, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(57, 57, 57)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(Card3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(Card8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(15, 15, 15)
                                                .addComponent(btnGuessAgain, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 1, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Card9, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Card4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Card14, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Card19, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(58, 58, 58)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(Card5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Card10, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                            .addComponent(Card15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Card20, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(49, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mainTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(365, 365, 365))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(mainTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Card1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Card2)
                                    .addComponent(Card3)
                                    .addComponent(Card4))
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Card8)
                                            .addComponent(Card10)
                                            .addComponent(Card9)
                                            .addComponent(Card7))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(29, 29, 29)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(Card13)
                                                    .addComponent(Card14)
                                                    .addComponent(Card15)))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(Card12))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Card6)
                                        .addGap(29, 29, 29)
                                        .addComponent(Card11))))
                            .addComponent(Card5))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(Card16)
                                .addGap(24, 24, 24))
                            .addComponent(Card17)
                            .addComponent(Card18)
                            .addComponent(Card19)
                            .addComponent(Card20))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPlay)
                    .addComponent(btnGuessAgain)
                    .addComponent(btnExit))
                .addGap(30, 30, 30)
                .addComponent(txtInstruction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        System.exit(0); // Exits the GUI application.
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
        // TODO add your handling code here:
        
        /** Set change array. */
        for (int i = 0; i < 20; i++) {  // this loop is used to check if a match was made
            change[i] = 1;
        }
        
        /** Assign cards at random. */
        // essentially we're making the array list look like -- [0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9]
        String temp;  // create temporary String
        for (int i = 0; i < 10; i++) {  // for each number from 0-9, add number in the set arrayList
            for (int j = 1; j <= 2; j++) {  // inner loop puts numbers into pairs of consectecutive array entries
                temp = Integer.toString(i); // convert the String 'temp' to an integer
                set.add(temp);  // add the numbers to the set in which has an available position
            }
        }
        for (int i = 0; i < 20; i++) { // for each card (1 to 20) in the array, this loop adds the card value in the array list
            double index = Math.floor(Math.random()*(20-i)); // creates a random number and converts it to integer status
            int index1 = (int)index; // convert the double to an integer variable
            cards.add(set.get(index1));  // add the card at that index to original array
            set.remove(set.get(index1)); // remove the card at that index
        }
        
        txtInstruction.setText("Make sure to only select two cards.  If they don't match, click Guess Again."); // once play button's clicked, it will say this message
    }//GEN-LAST:event_btnPlayActionPerformed

    private void Card1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card1ActionPerformed
        // TODO add your handling code here:
        pickCard(Card1, 0); // calls the pickCard method for Card 1 and stores the first index value
    }//GEN-LAST:event_Card1ActionPerformed

    private void Card2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card2ActionPerformed
        // TODO add your handling code here:
        pickCard(Card2, 1); // calls the pickCard method for Card 2 and stores the second index value
    }//GEN-LAST:event_Card2ActionPerformed

    private void Card3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card3ActionPerformed
        // TODO add your handling code here:
        pickCard(Card3, 2); // calls the pickCard method for Card 3 and stores the third index value
    }//GEN-LAST:event_Card3ActionPerformed

    private void Card4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card4ActionPerformed
        // TODO add your handling code here:
        pickCard(Card4, 3); // calls the pickCard method for Card 4 and stores the 4th index value
    }//GEN-LAST:event_Card4ActionPerformed

    private void Card5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card5ActionPerformed
        // TODO add your handling code here:
        pickCard(Card5, 4); // calls the pickCard method for Card 5 and stores the 5th index value
    }//GEN-LAST:event_Card5ActionPerformed

    private void Card6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card6ActionPerformed
        // TODO add your handling code here:
        pickCard(Card6, 5); // calls the pickCard method for Card 6 and stores the 6th index value
    }//GEN-LAST:event_Card6ActionPerformed

    private void Card7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card7ActionPerformed
        // TODO add your handling code here:
        pickCard(Card7, 6); // calls the pickCard method for Card 7 and stores the 7th index value
    }//GEN-LAST:event_Card7ActionPerformed

    private void Card8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card8ActionPerformed
        // TODO add your handling code here:
        pickCard(Card8, 7); // calls the pickCard method for Card 8 and stores the 8th index value
    }//GEN-LAST:event_Card8ActionPerformed

    private void Card9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card9ActionPerformed
        // TODO add your handling code here:
        pickCard(Card9, 8); // calls the pickCard method for Card 9 and stores the 9th index value
    }//GEN-LAST:event_Card9ActionPerformed

    private void Card10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card10ActionPerformed
        // TODO add your handling code here:
        pickCard(Card10, 9); // calls the pickCard method for Card 10 and stores the 10th index value
    }//GEN-LAST:event_Card10ActionPerformed

    private void Card11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card11ActionPerformed
        // TODO add your handling code here:
        pickCard(Card11, 10);  // calls the pickCard method for Card 11 and stores the 11th index value
    }//GEN-LAST:event_Card11ActionPerformed

    private void Card12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card12ActionPerformed
        // TODO add your handling code here:
        pickCard(Card12, 11);  // calls the pickCard method for Card 12 and stores the 12th index value
    }//GEN-LAST:event_Card12ActionPerformed

    private void Card13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card13ActionPerformed
        // TODO add your handling code here:
        pickCard(Card13, 12);  // calls the pickCard method for Card 13 and stores the 13th index value
    }//GEN-LAST:event_Card13ActionPerformed

    private void Card14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card14ActionPerformed
        // TODO add your handling code here:
        pickCard(Card14, 13);  // calls the pickCard method for Card 14 and stores the 14th index value
    }//GEN-LAST:event_Card14ActionPerformed

    private void Card15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card15ActionPerformed
        // TODO add your handling code here:
        pickCard(Card15, 14);  // calls the pickCard method for Card 15 and stores the 15th index value
    }//GEN-LAST:event_Card15ActionPerformed

    private void Card16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card16ActionPerformed
        // TODO add your handling code here:
        pickCard(Card16, 15);  // calls the pickCard method for Card 16 and stores the 16th index value
    }//GEN-LAST:event_Card16ActionPerformed

    private void Card17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card17ActionPerformed
        // TODO add your handling code here:
        pickCard(Card17, 16);  // calls the pickCard method for Card 17 and stores the 17th index value
    }//GEN-LAST:event_Card17ActionPerformed

    private void Card18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card18ActionPerformed
        // TODO add your handling code here:
        pickCard(Card18, 17);  // calls the pickCard method for Card 18 and stores the 18th index value
    }//GEN-LAST:event_Card18ActionPerformed

    private void Card19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card19ActionPerformed
        // TODO add your handling code here:
        pickCard(Card19, 18);  // calls the pickCard method for Card 19 and stores the 19th index value
    }//GEN-LAST:event_Card19ActionPerformed

    private void Card20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card20ActionPerformed
        // TODO add your handling code here:
        pickCard(Card20, 19);  // calls the pickCard method for Card 20 and stores the 20th index value
    }//GEN-LAST:event_Card20ActionPerformed

    private void btnGuessAgainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuessAgainActionPerformed
        // TODO add your handling code here:
        count = 0; // sets count to 0; it will reset the card back to 0 since 
        
        if (c1 == c2) { // checks if the first card and second card chosen are the same
            cardsLeft -= 2; // cards that are left get subracted by two each time the cards match
            if (cardsLeft == 0) {  // if there are no cards left to be matched...
                txtInstruction.setText("Congratulations! You have finished the Matching Game!"); // ..then output congrats message to the user
            }
            
            for (int i = 1; i <=2; i++) { // loops two times to set the two cards
                
                // **if statements below checks to see if the same card has been chosen**
                
                if (change[0] == 0) {  // checks to see if the first card is the same
                    Card1.setIcon(done); // changes the buttons to the done icon
                    change[0] = 2;  // sets the change value so that it's completed
                }
                else if (change[1] == 0) { // checks to see if the second card is the same
                    Card2.setIcon(done); // changes the buttons to the done icon
                    change[1] = 2;  // sets the change value so that it's completed
                }
                else if (change[2] == 0) {  // checks to see if the third card is the same
                    Card3.setIcon(done);  // changes the buttons to the done icon
                    change[2] = 2;  // sets the change value so that it's completed
                }
                else if (change[3] == 0) {  // checks to see if the fourth card is the same
                    Card4.setIcon(done);  // changes the buttons to the done icon
                    change[3] = 2;  // sets the change value so that it's completed
                }
                else if (change[4] == 0) {  
                    Card5.setIcon(done);       // comments go on for the rest of the cards below, that are the same
                    change[4] = 2;  
                }
                else if (change[5] == 0) {
                    Card6.setIcon(done);  
                    change[5] = 2;  
                }
                else if (change[6] == 0) {
                    Card7.setIcon(done);
                    change[6] = 2;
                }
                else if (change[7] == 0) {
                    Card8.setIcon(done);
                    change[7] = 2;
                }
                else if (change[8] == 0) {
                    Card9.setIcon(done);
                    change[8] = 2;
                }
                else if (change[9] == 0) {
                    Card10.setIcon(done);
                    change[9] = 2;
                }
                else if (change[10] == 0) {
                    Card11.setIcon(done);
                    change[10] = 2;
                }
                else if (change[11] == 0) {
                    Card12.setIcon(done);
                    change[11] = 2;
                }
                else if (change[12] == 0) {
                    Card13.setIcon(done);
                    change[12] = 2;
                }
                else if (change[13] == 0) {
                    Card14.setIcon(done);
                    change[13] = 2;
                }
                else if (change[14] == 0) {
                    Card15.setIcon(done);
                    change[14] = 2;
                }
                else if (change[15] == 0) {
                    Card16.setIcon(done);
                    change[15] = 2;
                }
                else if (change[16] == 0) {
                    Card17.setIcon(done);
                    change[16] = 2;
                }
                else if (change[17] == 0) {
                    Card18.setIcon(done);
                    change[17] = 2;
                }
                else if (change[18] == 0) {
                    Card19.setIcon(done);
                    change[18] = 2;
                }
                else if (change[19] == 0) {
                    Card20.setIcon(done);
                    change[19] = 2;
                } 
            }
        }
        else {   // otherwise, if the cards chosen are not the same
            for (int i = 1; i <=2; i++) { // loops two times to set the two cards
                
                // **if statements below check to see if the card has changed**
                
                if (change[0] == 0) {  // checks to see if the first card changed
                    Card1.setIcon(back);  // changes the buttons to the cardback icon
                    change[0] = 1;  // sets the change value back to original card face (which was being flipped)
                }
                else if (change[1] == 0) {  // checks to see if the second card changed
                    Card2.setIcon(back);  // changes the buttons to the cardback icon
                    change[1] = 1;  // sets the change value back to original card face (which was being flipped)
                }
                else if (change[2] == 0) {  // checks to see if the third card changed
                    Card3.setIcon(back);  // changes the buttons to the cardback icon
                    change[2] = 1;  // sets the change value back to original card face (which was being flipped)
                }
                else if (change[3] == 0) {  // checks to see if the fourth card changed
                    Card4.setIcon(back);  // changes the buttons to the cardback icon
                    change[3] = 1;  // sets the change value back to original card face (which was being flipped)
                }
                else if (change[4] == 0) {
                    Card5.setIcon(back);       // comments go on for the rest of the cards below, in which didn't match
                    change[4] = 1;
                }
                else if (change[5] == 0) {
                    Card6.setIcon(back);
                    change[5] = 1;
                }
                else if (change[6] == 0) {
                    Card7.setIcon(back);
                    change[6] = 1;
                }
                else if (change[7] == 0) {
                    Card8.setIcon(back);
                    change[7] = 1;
                }
                else if (change[8] == 0) {
                    Card9.setIcon(back);
                    change[8] = 1;
                }
                else if (change[9] == 0) {
                    Card10.setIcon(back);
                    change[9] = 1;
                }
                else if (change[10] == 0) {
                    Card11.setIcon(back);
                    change[10] = 1;
                }
                else if (change[11] == 0) {
                    Card12.setIcon(back);
                    change[11] = 1;
                }
                else if (change[12] == 0) {
                    Card13.setIcon(back);
                    change[12] = 1;
                }
                else if (change[13] == 0) {
                    Card14.setIcon(back);
                    change[13] = 1;
                }
                else if (change[14] == 0) {
                    Card15.setIcon(back);
                    change[14] = 1;
                }
                else if (change[15] == 0) {
                    Card16.setIcon(back);
                    change[15] = 1;
                }
                else if (change[16] == 0) {
                    Card17.setIcon(back);
                    change[16] = 1;
                }
                else if (change[17] == 0) {
                    Card18.setIcon(back);
                    change[17] = 1;
                }
                else if (change[18] == 0) {
                    Card19.setIcon(back);
                    change[18] = 1;
                }
                else if (change[19] == 0) {
                    Card20.setIcon(back);
                    change[19] = 1;
                } 
            }
        }
    }//GEN-LAST:event_btnGuessAgainActionPerformed
    
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MatchingGame().setVisible(true);
            }
        });
    }
    
    /**
     * @param card would store the image of each card in the array
     * @param cardIndex selects the index of the card and stores it as an integer
     * This method is to select each of the cards in the game.
     */    
    public void pickCard(JButton card, int cardIndex) {
        String temp = cards.get(cardIndex); // checks to see what random picture is placed in the JFrame box 
                                           // (card index depends on which card's selected)
        
        /** The if statements below will check to see which value the card is in, and will set up the correct image to it. */
        
        if (temp.equals("0")) {  // 
            card.setIcon(a); // changes the button icon to the correct picture, in this case: Image a
        
        }
        else if (temp.equals("1")) {  
            card.setIcon(b);  // changes the button icon to the correct picture, in this case: Image b
        }        
        else if (temp.equals("2")) {
            card.setIcon(c);  // changes the button icon to the correct picture, in this case: Image c
        }  
        else if (temp.equals("3")) {
            card.setIcon(d);  // changes the button icon to the correct picture, in this case: Image d
        }  
        else if (temp.equals("4")) {
            card.setIcon(e);  // changes the button icon to the correct picture, in this case: Image e
        }  
        else if (temp.equals("5")) {
            card.setIcon(f);  // changes the button icon to the correct picture, in this case: Image f
        }  
        else if (temp.equals("6")) {
            card.setIcon(g);  // changes the button icon to the correct picture, in this case: Image g
        }  
        else if (temp.equals("7")) {
            card.setIcon(h);  // changes the button icon to the correct picture, in this case: Image h
        }  
        else if (temp.equals("8")) {
            card.setIcon(i);  // changes the button icon to the correct picture, in this case: Image i
        }  
        else if (temp.equals("9")) {
            card.setIcon(j);  // changes the button icon to the correct picture, in this case: Image j
        }  
        
        
        /** To check if the first and second cards selected match. */ 
        count++; // check each card by incrementing count value
        if (count == 1) {  // if the first card is selected
            c1 = Integer.parseInt(temp); // then it stores the value of the card selected into c1 and compares with c2
            change[cardIndex] = 0; // sets the change array to show that the card icon has been changed 
        }
        else if (count == 2) {  // if the second card is selected
            c2 = Integer.parseInt(temp); // then it stores the value of the card selected into c2 and compares with c1
            change[cardIndex] = 0; // set the change array to show that the card icon has been chosen 
        }
    
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Card1;
    private javax.swing.JButton Card10;
    private javax.swing.JButton Card11;
    private javax.swing.JButton Card12;
    private javax.swing.JButton Card13;
    private javax.swing.JButton Card14;
    private javax.swing.JButton Card15;
    private javax.swing.JButton Card16;
    private javax.swing.JButton Card17;
    private javax.swing.JButton Card18;
    private javax.swing.JButton Card19;
    private javax.swing.JButton Card2;
    private javax.swing.JButton Card20;
    private javax.swing.JButton Card3;
    private javax.swing.JButton Card4;
    private javax.swing.JButton Card5;
    private javax.swing.JButton Card6;
    private javax.swing.JButton Card7;
    private javax.swing.JButton Card8;
    private javax.swing.JButton Card9;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnGuessAgain;
    private javax.swing.JButton btnPlay;
    private javax.swing.JLabel mainTitle;
    private javax.swing.JTextField txtInstruction;
    // End of variables declaration//GEN-END:variables
}
